general:

- Llevar cosas que sacamos del kyg a lib.rs y desde ctehexml
    - Comparamos
        - cargo run -- --skip-kyg tests/data/ > salida.json.skip
        - cargo run tests/data/ > salida.json.base
    - Nos falta:
        - windows:
            - Orientation: podemos obtenerlo del muro. Pensar si lo calculamos (mejor) y eliminamos del hueco o lo guardamos
            - U: ir haciendo cálculos a partir de construcción
            - Fshobst: empezar con 1.0 en vez de 0.0?
        - walls: U: ir haciendo cálculos a partir de construcción
- Detectar elementos que pertenecen a la envolvente a partir de espacios
    - son los elementos que pertenecen a espacios dentro de la envolvente pero
      que no comunican con otros espacios interiores a la envolvente
- Incluir construcciones en la exportación
    - Necesitamos biblioteca base en Rust para interpretar construcciones:
        - BDCatalogo.bdc.utf8 -> Convertir a datos Rust
    - opacos
    - huecos
    - pts?
- Añadir tests de tbl.rs (parse)
- ¿Convertir vectores de objetos de espacios, pisos, etc a vectores de nombres y hashmaps de objetos
  o convertir a https://docs.rs/crate/indexmap/?
    - Esto igual es mejor como una cache para hacer las consultas (una función que memoize la búsqueda o algo así)
- Migrar de failure a thiserror o anyhow: https://github.com/bytecodealliance/cranelift/pull/1188/files
- Usar referencias con hashes como IDs:
        #[derive(Hash)]
        struct Block {
            ...
        }

        fn get_id<T: Hash>(t: &T) -> String {
            let mut s = DefaultHasher::new();
            t.hash(&mut s);
            s.finish(); // u64
            format!("{:x}", s)
        }

ideas:
- Se podrían meter las ventanas como hijos de muros para facilitar las mediciones (pero tiene sus desventajas)
- hacer visualizador 3d (con 3djs).

envolventectedata:
    - dejar de usar tipos de datos de KyG
    - añadir construcciones de opacos y huecos
    Llevar a env:
        - Altura libre de espacios: data.space_net_height(spacename)
            - Otra opción es llevar la altura de suelo a techo al espacio como dato
        - Volumen neto de espacios: data.space_volume(spacename)
        - ir viendo los cálculos que hacemos cómo se pueden llevar de BDL a envolventetypes eliminando aspectos innecesarios
            wall -> data.wall_gross_area(wallname), data.wall_net_area(wallname), data.wall_azimuth(wallname)
            ...
        - Volumen interno a la envolvente térmica: volumen_et
        - K (igual devuelve estructura con datos intermedios por tipos, área de intercambio, etc)

BDL:
- Se podría eliminar la referencia entre muros y espacios, generando el polígono del muro a partir de su referencia al polígono del espacios
    - así eliminamos referencias a vértices de polígonos y también location
- Quitar de los elementos aquellas cosas que necesitan consultas globales (con acceso a bdldata)
- Comprobar qué se cambia en las plantas o en el edificio cuando se indica una cota base distinta a la 0.0 (ver si se pone la Z de la planta P01 distinta a "")
- Convertir definición de muros de polygon o location a (X, Y, Z, WIDTH, HEIGHT, AZIMUTH)
- Implementar espacios (y plantas) con multiplicadores (mediciones)
- Seguir eliminando bloques genéricos convirtiendo a estructuras los elementos BDL:
    - metadatos
    - horarios
    - condiciones operacionales
    - consignas
- Implementar cálculo de U para los distintos elementos y así no usar kyg
  (O al menos calcular con suma de las resistencias superficiales)

EnvolventeCTE:
- Eliminar uso de data.autil y usar data.a_util_ref()
- Exportar construcciones (LAYERS, GAPS)

- Ver relación entre huecos y muros (orientación).
    - Si eliminamos orientación de los huecos y lo calculamos desde su muro (orientation+tilt -> orientación CTE)

Notas:

Envolventetypes:

- Separar de hueco y muro las construcciones del resto de datos:
    - datos de hueco (name, wall, orientation, A, Fshobst + id construcción (a partir de hash o con una semilla constante?))
    - construcción de hueco (name, Ff, gglwi, ggshwi, C_100)
    - muro
    - construcción de muro
    - en envolventecte se haría un diccionario de ids a nombres, u, C_100, etc para obtener los datos relevantes
