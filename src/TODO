# TAREAS PENDIENTES

## cte::Data
- TODO: Comprobar si las z de los muros enterrados (y suelos) son > 0 o no (para calcular U en impl_u_for_walls)

- Calcular más cosas:
    - Devolver datos de U para u_values ({ windows: BTreeMap<&Window>, walls:BTreeMap<&Wall> })
    - K (igual devuelve estructura con datos intermedios por tipos, área de intercambio, etc)
    - qsoljul
    - n50
    - Lista de elementos que pertenecen a la envolvente
        - son los elementos que pertenecen a espacios dentro de la envolvente pero
          que no comunican con otros espacios interiores a la envolvente
- Módulo para calcular propiedades de elementos
    - Calculador de elementos para obtener % de afección de U según intercalarios
        y cajón de persiana a partir de expresiones en DA DB-HE1 (p.13)
    - propiedades de vidrios con protecciones móviles, etc
    - Fshobst de huecos según retranqueos, voladizos, aletas, etc s/ 52016-1

- Nuevos datos / campos:
    - Ushwi: transmitancia de huecos con contraventanas activadas (en construcción de hueco)
    - Incorporar en construcciones la composición de capas (capas: Vec<(String, f32)>)
    - Incorporar datos de materiales para poder calcular U de composiciones
        - Necesita biblioteca base en Rust para interpretar construcciones:
        - BDCatalogo.bdc.utf8 -> Convertir a datos Rust

## EnvolventeCTE

- Actualizar a versión actual del formato JSON de cte::Data
- Pensar cómo mantenemos sincronizados los datos entre cte::Data y EnvolventeCTE:
    - tal vez usando un Map de JS para BTreeMap (ver cómo funciona con serde-JSON
    - devolviendo datos en estructuras aparte (u_values: { windows: BTreeMap<&Window>, walls:BTreeMap<&Wall> })
- Intentar llevar el trabajo a wasm
    - calcular K, qsoljul, n50, U de elementos, etc
    - calcular elementos (propiedades de vidrios, Fshobst de huecos según retranqueos, voladizos, aletas, etc)
- Eliminar uso de data.autil y usar data.a_ref()

## BDL

- Se podría eliminar la referencia entre muros y espacios, generando el polígono del muro a partir de su referencia al polígono del espacios
    - así eliminamos referencias a vértices de polígonos y también location
- Quitar de los elementos aquellas cosas que necesitan consultas globales (con acceso a bdldata)
- Comprobar qué se cambia en las plantas o en el edificio cuando se indica una cota base distinta a la 0.0 (ver si se pone la Z de la planta P01 distinta a "")
- Convertir definición de muros de polygon o location a (X, Y, Z, WIDTH, HEIGHT, AZIMUTH)
- Seguir eliminando bloques genéricos convirtiendo a estructuras los elementos BDL:
    - metadatos
    - horarios
    - condiciones operacionales
    - consignas
- Trasladar cálculo de Fshobst de 52016-1 en lugar de DA DB-HE/1 y reutilizar módulo nuevo
- Idea: hacer visualizador 3d (con 3djs).
